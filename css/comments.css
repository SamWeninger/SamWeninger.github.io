/* css is a set of rules which target certain tags or #ids or classes, etc. */
/* classes can be used multiple times per page, tags only to be used once per page --unique
 * SELECTOR: {DECLARATION} 
 * #id p {declaration}  -> all paragraph tags with id 'id' styled this way
 * .class div {declaration} -> all div tags in 'class' classes styled this way 
 * DECLARATION = 
 *  property_name: value_name; -> elements in declaration
*/

/* CSS WORKS FROM TOP TO BOTTOM, overrides 
 * HOWEVER, specificity ovverides cascades:
 * id = 100 pts
 * class = 10 pts
 * element = 1 pt 
 */

 /* IMPORTANT RULE: trumps all other rules
  * !important
  * property_name: value_name !important;
  */

/*
 * DESCENDANTS:
 * #parent #child <tag>{...}
 * targets id 'child' within id 'parent'
 * child and parent ids refer to embedded div tags?
 * #parent > <tag>{...}
 * > == child-combinator / 'direct' --> only tags directly under parent targeted, no children tags targeted
*/

/*
 * ADJACENTS:
 * #id h1 + p {...}
 * targets p tags immediately following h1 tags in 'id'
 */

/*
 * ATTRIBUTE SELECTOR:
 * <tag>[<attribute>]
 * <tag>[<attribute> = 'value'] eg. h1[title = "my title"]
 *                 '~=' -> includes pattern matches with spaces after etc.,
 *                 '$=' -> includes pattern matches that END in the same way
 *                 '^=' -> includes pattern matches that BEGINS same way
 * targets all tags ('tag') with an 'attribute' associated with it
 */

/*
 * PSEUDO-CLASS:
 * Behavioral and structural extensions
 * <class/tag> : <property>{...}
 * selector:keyword {declaration}
 * applies 'property' to tag/class
 *
 * EG. (common)
 * 'hover', 'active', 'visited'
 *
 * :first-child, :last-child
 * targets first and last, respectively, elements in group
 * e.g. div a:first-child {} -> targets first ELEMENT in div 
 * :nth-child(n) -> targets nth element
 * :nth-child(even/odd/<formula, eg. 2n+1>)
 * 
 * :first-of-type, :last-of-type
 * targets first and last elements of type selected
 * :nth-of-type(n) -> targets nth element
 * :nth-of-type(even/odd/<formula, eg. 2n+1>)
 */

/* COMBINING SELECTORS
* e.g. <tag>.<class> {...}
*/

/* UNIVERSAL SELECTOR
 * " * {...} "
 * TARGETS every element in page, not inheritance
 */

 /* FONT-SIZE
  * absolute: pixels (px)
  * relative: 
  *    em -> takes base font-size, multiplies by #em
  *    n% -> % of base font-size
  *
  * FONT-FAMILY
  * font-family: [font-stack]
  * list of fonts, used in order (if font 1 not installed, font 2 applied, etc.)
  *
  * TEXT-DECORATION
  * inherit (useful to override default browser styles), 
  * line-through, overline, underline, etc.
  *
  * FONT-WEIGHT
  * lighter, normal, bolder, ###, etc.
  *
  * TEXT-TRANSFORM
  * capitalize, uppercase, lowercase, etc.  
  *
  * COLOR
  * color: -> foreground (text)
  *    <name>, #XXXXXX
  * background-color: (background/highlight)
  * background: url(); <- add background image
  *
  * letter-spacing:
  * px, em, %  
  * em -> inherits font-size as param
  *
  * word-spacing:
  * px, em, %
  * em -> inherits font-size as param
  *
  * line-height:  -> height of line + space
  * px, em, % 
  * em -> inherits font-size as param, should be > 1
  *
  * margin-bottom: -> spacing at bottom of paragraph
  */

  /* BOX MODEL
   * margin        -> orange
   *   - vertical margins collapse (the higher of two margins wins/ becomes margin between 2 elems)
   *   - margins: top right bottom left (specifiy margins clockwise from top, 4 values)
   *   - margins: top/bottom right/left (2 values)
   *   - margins: top left/right bottom (3 values)
   *   - "auto" -> keyword for automatic margins to center box between others/boundaries
   *   - responsive design, i.e. shifting weppage dimensions, use % or auto for margins/width/padding
   * 
   * border        -> 
   *    - width, style, color
   *    eg.
   *       border-top-(width/style/color): 
   *       border-top: <width> <style> <color>
   *       border: ... ;
   *
   * padding       -> green
   *   - same margin rules apply to padding
   *   - (padding/margin)-(top/bottom/left/right) = ... ; -> specify specific side
   * width/height  -> blue
   *
   *
   *
   *
   *
   *
  
  
  
  */